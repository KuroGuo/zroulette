<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="renderer" content="webkit">
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no" />
    <title>Zspin</title>
    <link rel="shortcut icon" href="/favicon.png" />
    <link rel="stylesheet" href="/style/core.css" />
    <style>
      .container {
        padding-bottom: 20px;
      }
      .spinner-wrapper {
        width: 270px;
        height: 270px;
        position: relative;
      }
      .spinner {
        width: 100%;
        height: 100%;
        background-image: url(/style/images/spinner.jpg);
        background-repeat: no-repeat;
        background-position: center;
        background-size: 274px;
        border-radius: 100%;
        will-change: transform;
        -webkit-transform: rotate(20deg);
                transform: rotate(20deg);
      }
      .button-spin {
        position: absolute;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        margin: auto;
        width: 102px;
        height: 102px;
        background-image: url(/style/images/button-spin.png);
        background-repeat: no-repeat;
        background-position: center;
        background-size: 103px;
        border-radius: 100%;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
                user-select: none;
        cursor: pointer;
      }
      .button-spin.depressed {
        -webkit-transform: scale(.97);
                transform: scale(.97);
      }
      .spinner-pointer {
        position: absolute;
        left: 0;
        right: 0;
        top: -46px;
        margin: 0 auto;
        background-image: url(/style/images/pointer.png);
        background-repeat: no-repeat;
        background-position: center;
        background-size: contain;
        width: 15px;
        height: 98px;
        pointer-events: none;
      }
      .panel {
        margin-top: 50px;
        background-color: #21202f;
        font-size: 12px;
        border-radius: 4px;
        font-family: Menlo, Monaco, Consolas, monospace;
        padding: 10px 10px 0;
      }
      .panel-row {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        padding-bottom: 10px;
        -webkit-box-align: center;
        -ms-flex-align: center;
                align-items: center;
        -webkit-box-pack: justify;
            -ms-flex-pack: justify;
                justify-content: space-between;
      }
      .panel-button {
        border: 1px solid currentColor;
        border-radius: 12px;
        padding: 0 6px;
        font-size: 10px;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
                user-select: none;
      }
      #mask {
        position: fixed;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        z-index: 1000;
        display: none;
        cursor: wait;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
                user-select: none
      }
      #mask.show {
        display: block;
      }
      .form-logout {
        text-align: center;
      }
    </style>
  </head>
  <body>
    <div class="page" id="app">
      <div class="container">
        <div class="title"></div>
        <div class="spinner-wrapper">
          <div id="spinner" class="spinner"></div>
          <div id="button_spin" class="button-spin"></div>
          <div class="spinner-pointer"></div>
        </div>
        <div class="panel">
          <div class="panel-row panel-row-balance">
            <div>BALANCE: <span id="value_balance"><%= balance %></span> XZC</div>
            <a class="panel-button">WITHDRAWAL</a>
          </div>
          <div class="panel-row panel-row-rewards">
            <div>REWARDS: <span id="value_tshirt"><%= tShirt %></span> T-Shirt</div>
            <a class="panel-button">CLAIM</a>
          </div>
        </div>
        <form class="form-logout" method="post" action="/logout">
          <input id="form_logout_button_submit" type="submit" style="display: none;" />
          <a class="link link-logout" onclick="document.querySelector('#form_logout_button_submit').click()">LOG OUT</a>
        </form>
      </div>
    </div>

    <div id="mask"></div>

    <div id="dialog" class="dialog">
      <div class="dialog-container">
        <div class="dialog-body">
          <div id="dialog_message" class="dialog-message"></div>
          <span class="dialog-button-close" onclick="document.querySelector('#dialog').classList.remove('show')">OK</span>
        </div>
      </div>
    </div>

    <script src="/k-tap.js"></script>
    <script>
      ;(function () { 'use strict'
        var requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame
                            || window.mozRequestAnimationFrame || window.msRequestAnimationFrame

        var rotation = 0
        var rotationOffset = 20
        var lastRotation
        var speed = 0
        var maxSpeed = 360 * 3

        var frame, motion = function () {}

        var spinnerRotations = {
          '0.01 XZC': 0,
          '1 XZC': 62,
          '0.1 XZC': 117,
          '3 XZC': 180,
          '0.03 XZC': 241,
          '1 T-Shirt': 297
        }

        var spinner = document.querySelector('#spinner')
        var buttonSpin = document.querySelector('#button_spin')
        var mask = document.querySelector('#mask')
        var valueBalance = document.querySelector('#value_balance')
        var valueTshirt = document.querySelector('#value_tshirt')

        mask.addEventListener('mousedown', function (e) {
          e.preventDefault()
        })

        buttonSpin.addEventListener('mousedown', function (e) {
          e.preventDefault()
          buttonSpin.classList.add('depressed')
        })
        buttonSpin.addEventListener('touchstart', function (e) {
          e.preventDefault()
          buttonSpin.classList.add('depressed')
        })
        buttonSpin.addEventListener('ktapcancel', function () {
          buttonSpin.classList.remove('depressed')
        })
        buttonSpin.addEventListener('ktap', function () {
          buttonSpin.classList.remove('depressed')
          spin()
        })

        function Renderer(render) {
          this.render = render
        }
        Renderer.prototype.start = function () {
          var renderer = this
          var frame = function (time) {
            requestAnimationFrame(frame)
            renderer.render(time, renderer.lastFrameTime || time)
            renderer.lastFrameTime = time
          }
          requestAnimationFrame(frame)
        }

        new Renderer(function (time, lastFrameTime) {
          if (motion) motion(time - lastFrameTime)
          rotate()
        }).start()

        function showMask() {
          mask.classList.add('show')
        }
        function closeMask() {
          mask.classList.remove('show')
        }

        function spin() {
          showMask()
          start()
          var xhr = new XMLHttpRequest()
          var timeSend = new Date().getTime()
          xhr.addEventListener('load', function (e) {
            var xhr = e.currentTarget
            var response = JSON.parse(xhr.responseText)
            if (response && response.error) {
              closeMask()
              return alert(response.error)
            }
            if (xhr.status !== 201) {
              closeMask()
              return alert('Error: ' + xhr.statusText)
            }
            var resultName = response.name
            var balance = response.user.balance
            var tShirt = response.user.tShirt
            setTimeout(function () {
              end(spinnerRotations[resultName], function () {
                valueBalance.innerHTML = balance
                valueTshirt.innerHTML = tShirt
                closeMask()
                showDialog([
                  '<div class="dialog-title">Congratulations</div>',
                  'You get<strong> ' + resultName + '</strong>'
                ].join(''))
              })
            }, Math.max(3000 - (new Date().getTime() - timeSend), 0))
          })
          xhr.addEventListener('timeout', function () {
            closeMask()
            alert('Timeout.')
          })
          xhr.addEventListener('error', function (e) {
            closeMask()
            alert('Network error.')
          })
          xhr.open("post", "/api/record", true)
          xhr.send()
        }

        function start() {
          var a = 360 * 6
          motion = function (timespan) {
            speed += a * (timespan / 1000)
            if (speed > maxSpeed) speed = maxSpeed
            rotation += speed * (timespan / 1000)
          }
        }

        function end(result, callback) {
          var od = (360 - rotation % 360) + 6 * 360 + result
          var d, t, a, gone = 0
          motion = function (timespan) {
            d = od - gone
            t = d / (speed / 2) - timespan / 1000
            a = speed / t
            speed -= a * (timespan / 1000)
            if (speed < 0.000001 || gone >= od) {
              rotation = result
              speed = 0
              motion = null
              return callback()
            }
            rotation += speed * (timespan / 1000)
            gone += speed * (timespan / 1000)
          }
        }

        function rotate() {
          if (rotation === lastRotation) return
          var r = ((rotation + rotationOffset) % 360).toFixed(6)
          transform(spinner, 'rotate(' + r + 'deg)')
          lastRotation = rotation
        }

        function transform(element, value) {
          if (typeof element.style.transform === 'string') {
            element.style.transform = value
          } else if (typeof element.style.webkitTransform === 'string') {
            element.style.webkitTransform = value
          }
        }

        function showDialog(message) {
          var dialogElement = document.querySelector('#dialog')
          var dialogMessageElement = document.querySelector('#dialog_message')
          dialogMessageElement.innerHTML = message
          dialogElement.classList.add('show')
        }
      })()
    </script>
  </body>
</html>
